// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Time{},
			uncompressedSize: 447,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\x41\x4f\x3b\x21\x10\xc5\xef\xff\x4f\x31\x7f\x2e\xbd\xb8\x8b\xde\x4c\x85\x4d\x8c\xd5\xc4\x93\x8d\xf1\xe2\x91\xc2\xb8\x4c\xc3\xc2\x06\xa6\x6d\x56\xe3\x77\x37\x5b\xda\xa6\x27\x98\x37\xe1\x37\xef\x31\xea\xff\xea\xed\xe9\xe3\x73\xfd\x0c\x9e\x87\xd0\xfd\x53\xf5\x00\x50\x1e\x8d\x9b\x2f\x00\x8a\x89\x03\x76\x2f\x81\x46\x86\xc7\xf5\xab\x92\x55\xa8\xcd\x01\xd9\x80\xf5\x26\x17\x64\x2d\x76\xfc\xd5\xdc\x0b\x79\xdd\x8b\x66\x40\x2d\xf6\x84\x87\x31\x65\x16\x60\x53\x64\x8c\xac\xc5\x81\x1c\x7b\xed\x70\x4f\x16\x9b\x63\x71\x03\x14\x89\xc9\x84\xa6\x58\x13\x50\xdf\x89\x13\xa8\xf0\x74\x1e\x08\xb0\x49\x6e\x82\x9f\x53\x01\x30\x98\xdc\x53\x5c\xc2\xed\xc3\x45\x1a\x8d\x73\x14\xfb\x2b\xed\xb7\x72\xe4\x05\xa4\xe4\x39\xa0\x9a\x79\xa7\x39\x19\x5d\xb2\x50\x46\xb4\xcd\x2e\x07\xbd\x28\x07\xd3\xf7\x98\xdb\x6d\x49\x71\x01\xc1\x7c\x4f\x4d\xc6\xe8\x30\x53\xec\xc1\x93\xc3\xc6\xa7\xc2\x73\xc2\x4e\xc9\xe3\xe3\xb3\x61\x9b\xe7\xdf\x2a\xd9\x6a\xe1\x99\xc7\xb2\x94\x32\xe3\x86\x42\x98\xda\x9e\xd8\xef\x36\x2d\x25\xf9\x8e\xab\x64\x65\xc6\x80\xa6\x60\x91\xc1\x30\x16\xae\x9c\x76\xa0\xd8\x6e\x8b\xe8\x66\xd3\x47\x58\x75\x5d\xcd\x2a\x59\xf7\xf4\x17\x00\x00\xff\xff\xf2\x88\x1a\x30\xbf\x01\x00\x00"),
		},
		"/swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 29142,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x20\xb4\x3d\x66\xb1\xd7\xbd\xf5\x2d\x4d\xd3\x22\x58\x6b\x07\x4e\xda\x61\x18\x02\x83\x96\x68\x87\xad\x24\x2a\x24\x95\x2d\x08\xfc\xdf\x07\xea\x7e\xb7\x6e\xb6\x49\x4b\x05\x0a\x3b\x16\x49\x9d\xcb\x77\xce\xf9\x44\x52\x7c\x9b\x00\xa0\xb1\x7f\xe1\x76\x8b\xa8\xf6\x1e\x68\xef\x2e\x67\xda\x85\xf8\x0d\xdb\x1b\xa2\xbd\x07\xe2\x3a\x00\x1a\xc7\xdc\x44\xe2\xfa\x27\x13\x3b\x1c\x2c\x6f\xee\x1f\xc0\xd5\xdd\xad\xd7\x14\x00\xed\x05\x51\x86\x89\x2d\x1a\xcc\x2e\x67\x97\x33\x6d\x02\xc0\xce\x1b\x86\xe9\x4f\xc8\x42\x4c\x7b\x0f\xfe\xf1\x9b\x3e\x71\xee\x84\xdd\xc4\x77\x26\xda\x3e\x7a\x6d\x75\x62\x33\x37\xd5\x18\x3a\x8e\x89\x75\xc8\x31\xb1\xa7\x3f\x18\xb1\xe3\xb6\x0e\x25\x86\xab\xd7\x6c\x0b\xf9\x13\x8b\x75\x99\x42\x07\x4f\x5f\x7e\x9f\xa2\x17\x68\xba\x90\xa3\xe8\x8a\x68\x4a\x18\x4f\xfc\x0d\x80\x46\x1c\x44\xbd\x41\x6f\x0d\xa1\xde\x4d\xd8\xe9\x22\x6e\x42\x11\x73\x88\xcd\x10\x4b\xf5\x04\x40\x7b\x37\x9b\x65\x7e\x02\x40\x33\x10\xd3\x29\x76\x78\x60\xaf\x2b\xc0\x5c\x5d\x47\x8c\x6d\x5c\x13\x84\x23\x5d\x26\x86\xf7\x3a\x79\x66\x84\xb9\xc1\x00\xd0\x7e\xa5\x68\x23\xc6\xf9\x65\x6a\xa0\x0d\xb6\xb1\x18\x97\x4d\x37\xc2\x4d\x81\xac\x98\xd8\xcb\x60\x5c\x2d\xd5\x7b\x37\x29\xfa\xbe\x4b\x68\xe6\x40\x0a\x2d\xc4\x11\x8d\xed\xec\xff\xcb\xe8\x64\x43\xcb\x43\xc7\x9a\x18\xaf\x59\xd1\xb1\x5d\x76\x85\xa2\x67\x17\x53\x24\xec\xca\xa9\x8b\xfa\x56\xf9\xd9\x45\x8c\xd7\xd1\xf8\x31\xa1\x31\x87\xdb\xac\xae\x5a\x3c\x68\x3c\xda\xe3\x24\x39\x4a\x60\xb3\x08\x5a\x1b\xd3\x1f\x26\xc2\xd5\x16\x55\xc3\xea\x0b\x66\xfc\x93\xd7\x49\x01\x5c\x09\x41\x85\xc0\x87\x46\x93\x89\x2d\xcc\x8b\xe1\xf4\xec\x22\x5a\x85\xa7\x0d\x34\x59\x16\x50\xfc\xd5\xf1\x86\xc5\x36\x47\x22\xdb\x65\x2e\x6f\x08\xb5\x20\x0f\x1a\xfc\xf1\x2e\xa9\xdc\xee\x62\xbf\xb0\x64\xb3\x61\x48\x0e\x69\x6b\x03\xdb\x47\x5c\x1e\xd3\x17\xb5\xd3\xe1\x35\x45\x90\x23\x31\x8e\x2a\xc0\x3d\xfb\x14\x18\xbb\xa4\xc7\x14\x58\x86\x94\xf2\xec\x37\x7d\x13\x1f\xab\x9f\xe8\x75\x37\xa5\xae\x89\x1a\xa7\xc3\xa5\xd7\x49\x01\x54\x09\x41\x8f\x91\x0e\x43\x7b\x16\xa3\x4b\x90\x9c\x66\xe8\x0a\x33\x0c\xe3\x14\xdb\xdb\xa6\xf9\x6e\x4c\xce\x07\x4e\xce\x3e\xfe\xbb\x27\x67\x31\x8e\x2a\x61\x34\xac\x10\x92\xa4\x54\x08\xc3\xf7\x58\x2a\xca\x70\xdb\xa0\x54\x4c\x09\x35\xbc\xc7\xd1\xf8\xb9\xcc\xad\x86\xfa\x42\x74\x90\xab\x62\x38\x54\xc8\xc8\xb1\x7f\xf7\xdd\x88\xec\x63\x22\x3b\xc6\x83\x64\xc8\x7e\xc3\xc6\xae\x09\x13\xfa\x8c\xf8\x98\xc0\x65\x85\x39\x36\x8e\x20\x47\x7f\x84\xc1\x40\x26\x4a\x4d\x77\xe5\xe1\xf6\xd1\x6b\x22\x15\xe2\x86\x9c\x47\x15\x03\xd8\xbe\x2a\xfd\xcd\x31\x46\x42\x0a\x06\x0e\x37\x15\xe8\x43\x0c\x54\xd9\xe8\x83\xf8\x58\x61\x63\x37\x35\xb0\xb0\xed\xda\xf5\xa4\x6e\xb4\x84\xe1\xb3\xfe\x8f\x89\xfe\x2a\x44\x63\x4a\xde\x41\x45\x65\xe0\x72\x39\x84\x39\x79\x68\xe6\xd1\xdb\x63\x88\x7e\x4c\x05\xd5\x41\x42\x35\xf7\x04\x50\x9b\x95\x49\x19\xb1\x43\x66\x67\x52\x05\xa6\x2c\x72\xbc\x40\x8a\xa1\xcd\x4b\xed\xd2\x65\xba\xb5\x0b\x79\xdd\x17\xda\x0d\x49\xac\x94\xc1\x38\x96\xcf\x02\x69\xc6\x28\x2d\x90\xe3\xe4\x65\x3c\x1f\x45\xd2\x95\xf1\x20\x93\xb5\x21\xd7\xdf\xfd\xae\x2a\x24\x86\x50\xd4\x41\xe5\x84\x93\xc3\x3f\x05\x93\x1e\x91\xff\x3d\xc4\x6c\x57\xd0\xb7\xa7\xa9\xb2\x61\x7f\xc8\x0c\x55\xae\xf9\xc3\x0a\x70\x36\x64\x5f\xb2\x61\x6c\xcc\xaf\x69\x69\x46\x9a\x93\xa2\x39\xd2\xe4\x79\x91\xe2\x1b\xae\x3e\x8e\x7b\xfb\x62\x38\x1d\x27\xbe\x6a\x83\x60\xef\xf6\xcd\xda\x35\x5b\x2a\x27\x1f\xb7\x60\xab\xe6\xd3\x7a\x05\x52\x2a\x87\x0e\x22\x6a\xd5\xa9\x46\xa7\xdc\x1a\xcc\xd0\xd6\x42\x99\x67\xea\x3a\x9b\x81\xef\xc3\x7e\x0a\x60\x3a\x90\x75\x7c\x43\x22\x23\xac\x8a\x9b\x70\x23\xdc\x55\x65\xe4\x7a\x73\x42\xc1\x50\x0a\x21\x78\x20\xaf\x4a\x04\xda\xf6\x98\x12\x2b\x50\x53\x99\x15\x5b\x11\xf4\x11\x57\x61\x3b\x49\x29\x5d\x9d\x1c\x52\x9b\xa9\xcb\xe6\xed\x41\x93\xf5\x5a\xd5\xa1\x16\x5f\x97\xcd\xad\x43\x09\x62\x75\x58\xbb\x4c\x55\x2a\xf8\xe6\xaf\x18\xe8\xc4\x66\x9c\x42\xdc\x6e\xa5\xec\x3a\xea\xad\x02\xf6\x13\xd2\x1e\x18\xfe\x09\x13\x8f\x61\x90\x20\x6b\xb1\x07\x7a\x8c\x84\xeb\x04\x84\x7b\x0b\x86\xf6\x2b\x68\x12\xc6\xc4\x71\xcb\xbc\x74\xe0\x97\x6b\x1d\xad\x1a\xae\x0d\x99\x87\x84\x60\x1b\x13\x70\x91\x40\xe3\x9a\x5a\x8a\x0f\x9d\xac\x10\x44\x47\x1b\x25\x04\x8b\x34\xd0\x02\x94\x5a\x0e\xa4\x98\x11\xfb\xc1\x37\x75\x54\x03\x32\xa6\x8f\x62\x15\xd9\xae\x95\x12\x46\xfb\x36\xff\x73\xbe\xf8\x6b\xbe\xba\x5e\x7c\xbd\xbb\x5a\xde\xde\x2f\xe6\xab\x87\xbf\xef\x6e\x92\x41\x7a\xff\xb0\xbc\x9d\x7f\xae\x6a\x31\xff\xf6\xf5\xc3\xcd\xb2\xaa\xc5\x87\xc5\xe2\xcb\xcd\x55\xfe\x36\x93\x8c\xc1\x84\xb6\xd0\x35\xbd\xf9\xb4\x32\xd1\x52\x85\x32\x1b\xae\x05\x46\x20\xeb\x1f\x48\x8f\xd3\x4e\xa6\xc8\xc4\x32\x62\x23\x9b\x85\xca\x10\x9c\x0c\xf8\x64\x00\xb7\xe8\xce\xd3\x9e\x03\x7b\x13\x53\xca\xe5\xc5\x29\xc8\xd7\xaf\x95\x38\x7e\xee\x26\xb4\x4d\xdf\x17\x68\xba\x39\x5d\xea\x74\xd4\x3d\xca\x65\xac\x20\xdf\xd3\x3b\x19\xd6\x89\x89\x57\x11\xa7\xbf\x71\x6c\x95\xd8\xc3\xf5\x02\xb9\xdf\xe1\x0b\x49\x5b\x25\x7f\xec\x00\xcc\x11\x62\x61\x9b\x66\x10\xdb\xe7\xa4\xa2\x6d\xa1\x1d\xdc\x14\xed\x8d\x69\xa1\x58\xb8\x7b\xb8\x95\x4d\xa2\x9d\xf0\x6d\x6e\x4c\x4c\x93\xb8\xa5\x91\x61\xbb\xd6\x3a\xb3\xe6\x91\x88\x8c\x8d\x49\x20\x6f\x60\xf0\xe4\x92\x60\x07\x43\xb7\xb4\x71\xc0\x2c\x1a\xf7\x4b\xd3\xce\xc6\xdd\x91\x0d\xd7\x26\x2a\x75\xce\x9a\x10\x13\x41\xbb\xcc\xc4\xe1\xe5\xfa\x46\x4e\xbe\x4e\x78\x22\x34\x77\x4c\x58\x14\xda\x3f\xcb\xfa\x15\xad\xc2\x95\xaf\xc1\xed\x35\x56\x66\xba\xeb\xbc\x41\xb9\xcf\x18\x99\xfd\x63\x27\x02\x8f\xd2\x86\x4c\xbd\xff\x72\x74\x2e\x7a\x1e\x55\xe4\x5c\x99\x61\xfe\xd0\xd0\x0e\x00\xa1\xfe\x10\x2d\xfd\xd5\x25\x3e\x91\xcd\x31\x7f\x6d\x79\x63\x9d\xd8\x1c\xfd\x57\x6a\xee\x8c\xf6\xde\x35\x68\x18\x1e\x3d\x85\xe6\x5d\xb1\x2d\x2a\x6f\x9e\x9a\xa7\xa9\xe7\x9b\xe0\x0c\xdb\x93\x39\xa7\x93\x81\xc3\x5b\x9f\xd6\xd0\x09\x81\x2c\xc8\xf5\xa7\xde\xc8\x4f\x4f\x18\xee\xfa\x44\x85\x2d\xc4\x38\xb4\x9c\x83\x64\xa5\xd6\xcf\xd1\xa1\xef\x0d\xd7\x9f\x7f\x5d\x59\xd8\x34\x71\x6e\x6e\xb5\x5e\x56\x36\x88\xbb\x36\xeb\x25\x36\x6f\x77\xe5\x79\x53\xa7\x03\xf2\x79\xb5\xcb\x5d\x9e\x42\x94\xe2\x0d\x52\x0a\xd3\x13\xb7\x1a\xe6\xc8\x2a\xc8\x31\xcd\xde\x73\xa9\x95\xe0\xa3\xc3\xa4\x3b\xb2\xda\xc3\x6a\x97\xdd\xa7\x5c\x4b\xb5\xfc\x21\x74\xa7\x9d\xc4\xe8\xc1\x44\x1d\xab\xb9\x77\xa4\xd2\xd1\xd9\xf7\x09\x0b\x52\xd9\x29\x3d\x2d\xcd\xdf\xe2\x05\xff\xe2\xe2\xdf\xe3\x93\xbc\xda\x69\xb2\x1a\xab\x5d\x13\x53\xf6\xe0\xeb\xfe\xdd\x9e\x3d\xa4\xac\x56\x18\x86\x5b\xb8\x06\x43\x0d\x14\x04\x66\xfa\xd9\xac\x60\x87\x15\xe8\x1d\x4b\xc5\x8b\xeb\x4d\x10\xd5\x35\x5e\x0a\x5e\x0f\xe9\x5f\xcd\x82\x0d\x8c\xb5\x74\x2c\x5b\x77\x1e\x57\x36\x95\x5f\x76\x2a\x3f\x8d\x44\x29\xb2\x72\x1e\xd3\x8c\xfb\xdc\x34\x2e\x56\xe5\xbb\xf6\xb8\x58\x95\x3f\xfb\x52\xa9\x18\x68\x93\x1c\xf7\x19\x63\x5c\x8c\x2a\x3f\xcc\x40\x29\x70\x28\x6d\xfe\x70\x86\x65\xb4\xf8\xf8\x9c\x50\x86\x97\x89\xf8\xbf\x9b\xfc\x1f\x00\x00\xff\xff\x58\x48\xaf\x26\xd6\x71\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
		fs["/swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
