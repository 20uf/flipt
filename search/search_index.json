{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flipt A self contained feature flag solution. What is Flipt Flipt is an open source, self contained application that enables you to use feature flags and experimentation (A/B testing) across services, running in your environment. This means that you can deploy Flipt within your existing infrastructure and not have to worry about your information being sent to a third party, or the latency required to communicate across the internet. Flipt includes native client SDKs as well as a REST API so you can choose how to best add Flipt to your applications. For more on Flipt and it's concepts, take a look at the Concepts documentation. Flipt Features Flipt enables you to add feature flag support to your existing applications, with a simple, single UI and API. This can range from simple on/off feature flags to more advanced use cases where you want to be able to rollout different versions of a feature to percentages of your users. Flipt features include: Fast. Written in Go. Optimized for performance Stand alone, easy to run server with no external dependencies Native GRPC client SDKs to integrate with your applications Simple REST API Modern UI and debug console Why Flipt Many organizations understand the benefit of using feature flags in production, so they choose to implement them themselves in their main or original monolith. As their organization grows, so does their application and infrastructure and functionality makes it's way into a multitude of other services. Many times those services aren't even implemented in the same language. This is where their original feature flag solution tends to break down as it cannot be adapted to these services or languages. This results in either: Being able to use feature flags in a subset of services. Having multiple sources of truth for feature flags depending on the service/implementation. Flipt solves these issues. Flipt enables you to do what you do best, develop your applications, without having to worry about implementing your own feature flag solution that works across your infrastructure. On top of this, Flipt provides a nice, modern UI so that you can see the state of your feature flags and experiments in a single place. Running Flipt Flipt is a single, self contained binary that you run on your servers or cloud infrastructure. There are a multitude of benefits to running Flipt yourself, including: Security . No Flipt data leaves your servers and you don't have to open your infrastructure to the outside world to communicate with Flipt. It all runs within your existing infrastructure. Speed . Since Flipt is co-located with your existing services, you do not have to communicate across the internet to another application running on the other side of the world which can add excessive latency and slow down your applications. Simplicity . Flipt is a single binary with no external dependencies. This means there is no database to manage or connect to, no clusters to configure, and data backup is as simple as copying a single file. For a more detailed guide on how to setup and run Flipt, checkout the Installation documentation. For more information on how Flipt works behind the curtain, read the Architecture documentation. For information on how to integrate Flipt with your existing applications, see the Getting Started guide. Documentation https://markphelps.github.io/flipt Author Mark Phelps, @mark_a_phelps , mark.aaron.phelps at gmail.com","title":"Flipt"},{"location":"#flipt","text":"A self contained feature flag solution.","title":"Flipt"},{"location":"#what-is-flipt","text":"Flipt is an open source, self contained application that enables you to use feature flags and experimentation (A/B testing) across services, running in your environment. This means that you can deploy Flipt within your existing infrastructure and not have to worry about your information being sent to a third party, or the latency required to communicate across the internet. Flipt includes native client SDKs as well as a REST API so you can choose how to best add Flipt to your applications. For more on Flipt and it's concepts, take a look at the Concepts documentation.","title":"What is Flipt"},{"location":"#flipt-features","text":"Flipt enables you to add feature flag support to your existing applications, with a simple, single UI and API. This can range from simple on/off feature flags to more advanced use cases where you want to be able to rollout different versions of a feature to percentages of your users. Flipt features include: Fast. Written in Go. Optimized for performance Stand alone, easy to run server with no external dependencies Native GRPC client SDKs to integrate with your applications Simple REST API Modern UI and debug console","title":"Flipt Features"},{"location":"#why-flipt","text":"Many organizations understand the benefit of using feature flags in production, so they choose to implement them themselves in their main or original monolith. As their organization grows, so does their application and infrastructure and functionality makes it's way into a multitude of other services. Many times those services aren't even implemented in the same language. This is where their original feature flag solution tends to break down as it cannot be adapted to these services or languages. This results in either: Being able to use feature flags in a subset of services. Having multiple sources of truth for feature flags depending on the service/implementation. Flipt solves these issues. Flipt enables you to do what you do best, develop your applications, without having to worry about implementing your own feature flag solution that works across your infrastructure. On top of this, Flipt provides a nice, modern UI so that you can see the state of your feature flags and experiments in a single place.","title":"Why Flipt"},{"location":"#running-flipt","text":"Flipt is a single, self contained binary that you run on your servers or cloud infrastructure. There are a multitude of benefits to running Flipt yourself, including: Security . No Flipt data leaves your servers and you don't have to open your infrastructure to the outside world to communicate with Flipt. It all runs within your existing infrastructure. Speed . Since Flipt is co-located with your existing services, you do not have to communicate across the internet to another application running on the other side of the world which can add excessive latency and slow down your applications. Simplicity . Flipt is a single binary with no external dependencies. This means there is no database to manage or connect to, no clusters to configure, and data backup is as simple as copying a single file. For a more detailed guide on how to setup and run Flipt, checkout the Installation documentation. For more information on how Flipt works behind the curtain, read the Architecture documentation. For information on how to integrate Flipt with your existing applications, see the Getting Started guide.","title":"Running Flipt"},{"location":"#documentation","text":"https://markphelps.github.io/flipt","title":"Documentation"},{"location":"#author","text":"Mark Phelps, @mark_a_phelps , mark.aaron.phelps at gmail.com","title":"Author"},{"location":"architecture/","text":"Architecture The overall Flipt server architecture is shown in this diagram: Note Arrows indicate request or connection initiation direction, not necessarily dataflow direction. As shown in the above diagram, the Flipt application is made up of three main components: Flipt Backend Service Flipt REST API Flipt Web UI All three of these components run side by side in a single binary. The UI and REST API are served on the same port ( 8080 by default) and the Backend Service is served on 9000 by default. Backend Service The Flipt Backend Service is the main entrypoint to the application and implements all of the business logic for Flipt. This is what users of the gRPC client SDKs will communicate with, allowing for fast, efficient communication with your applications. REST API The Flipt REST API is implemented on top of the Flipt Backend Service using a gRPC Gateway (described below). The REST API is served under /api/v1 and allows all actions that the client SDKs allow. Web UI The Flipt Web UI is a modern, minimalist UI to allow you to easily setup and monitor your feature flags and experiments. It's served as a JavaScript Single Page Application (SPA) and communicates with the Flipt Backend Service through the REST API. A guide to using the UI for the first time can be found in the Getting Started documentation. Technologies Flipt is built using several amazing open source technologies including: Go Programming Language gRPC gRPC Gateway SQLite Vue.js Bulma Buefy A brief description of why each technology was chosen is below. Go From the Go documentation: Go makes it easy to build simple, reliable and efficient software. These are all goals that Flipt also aspires to. Flipt was written in Go mainly because of it's ability to produce bulletproof systems software as as single binary for multiple architectures. This allows Flipt to easily be deployed in almost any environment since it's as simple as copying a compiled binary. GRPC gRPC is a high performance, open source RPC framework created by Google. gRPC allows Flipt to be performant by eliminating much of the overhead incurred by using standard HTTP for communication. gRPC also has the benefit of being able to generate client SDKs in many different languages from a single Protobuf file. This allows you easily integrate your services with Flipt regardless of the language they are written in. GRPC Gateway While awesome, gRPC might not be for everyone. gRPC Gateway is a reverse-proxy server which translates a RESTful JSON API into gRPC. This allows Flipt to implement a REST API as well as the gRPC API described above. This means that the REST API follows the same codepaths as the gRPC service that Flipt implements, allowing for reduced bugs and a simpler architecture. The Flipt UI is also built on top of the REST API provided by gRPC gateway. SQLite From the SQLite documentation: SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine. SQLite is the most used database engine in the world. Two of the major goals of Flipt are to be 1) Fast and 2) Self contained. SQLite allows us to accomplish both. By embedding the datastore 'within' the application, we eliminate the need to communicate to an external database. This results in faster performance with is required if putting calls to Flipt in the 'hotpath' of your applications. Using SQLite means that you do not need to run an additional client/server RDBMS such as Postgres or MySQL in order for Flipt to store and retrieve your data. This means it's easy to get up and running with Flipt without having to install any additional software. And since a SQLite database is just a file, you can easily backup your data using traditional file backup methods. Vue.js Vue.js is a minimal, modern and performant JavaScript framework that makes it easy to implement reactive frontend applications such as the Flipt UI. Vue.js was chosen because of it's rich ecosystem as well as ease of use to get started. The Flipt UI is a Single Page Application (SPA) written in JavaScript using Vue.js, that communicates with with the Flipt backend over the Flipt REST API. This means that the UI uses the same API that end clients do, meaning that anything you can do with the Flipt API, you can do in the UI and vice versa. Bulma Bulma is a free, open source CSS framework based on Flexbox. It makes it easy to make nice looking user interfaces with minimal CSS. Buefy Buefy creates lightweight UI components for Vue.js based on Bulma. The Flipt UI was built using several Buefy components that greatly enhanced the speed of development.","title":"Architecture"},{"location":"architecture/#architecture","text":"The overall Flipt server architecture is shown in this diagram: Note Arrows indicate request or connection initiation direction, not necessarily dataflow direction. As shown in the above diagram, the Flipt application is made up of three main components: Flipt Backend Service Flipt REST API Flipt Web UI All three of these components run side by side in a single binary. The UI and REST API are served on the same port ( 8080 by default) and the Backend Service is served on 9000 by default.","title":"Architecture"},{"location":"architecture/#backend-service","text":"The Flipt Backend Service is the main entrypoint to the application and implements all of the business logic for Flipt. This is what users of the gRPC client SDKs will communicate with, allowing for fast, efficient communication with your applications.","title":"Backend Service"},{"location":"architecture/#rest-api","text":"The Flipt REST API is implemented on top of the Flipt Backend Service using a gRPC Gateway (described below). The REST API is served under /api/v1 and allows all actions that the client SDKs allow.","title":"REST API"},{"location":"architecture/#web-ui","text":"The Flipt Web UI is a modern, minimalist UI to allow you to easily setup and monitor your feature flags and experiments. It's served as a JavaScript Single Page Application (SPA) and communicates with the Flipt Backend Service through the REST API. A guide to using the UI for the first time can be found in the Getting Started documentation.","title":"Web UI"},{"location":"architecture/#technologies","text":"Flipt is built using several amazing open source technologies including: Go Programming Language gRPC gRPC Gateway SQLite Vue.js Bulma Buefy A brief description of why each technology was chosen is below.","title":"Technologies"},{"location":"architecture/#go","text":"From the Go documentation: Go makes it easy to build simple, reliable and efficient software. These are all goals that Flipt also aspires to. Flipt was written in Go mainly because of it's ability to produce bulletproof systems software as as single binary for multiple architectures. This allows Flipt to easily be deployed in almost any environment since it's as simple as copying a compiled binary.","title":"Go"},{"location":"architecture/#grpc","text":"gRPC is a high performance, open source RPC framework created by Google. gRPC allows Flipt to be performant by eliminating much of the overhead incurred by using standard HTTP for communication. gRPC also has the benefit of being able to generate client SDKs in many different languages from a single Protobuf file. This allows you easily integrate your services with Flipt regardless of the language they are written in.","title":"GRPC"},{"location":"architecture/#grpc-gateway","text":"While awesome, gRPC might not be for everyone. gRPC Gateway is a reverse-proxy server which translates a RESTful JSON API into gRPC. This allows Flipt to implement a REST API as well as the gRPC API described above. This means that the REST API follows the same codepaths as the gRPC service that Flipt implements, allowing for reduced bugs and a simpler architecture. The Flipt UI is also built on top of the REST API provided by gRPC gateway.","title":"GRPC Gateway"},{"location":"architecture/#sqlite","text":"From the SQLite documentation: SQLite is a C-language library that implements a small, fast, self-contained, high-reliability, full-featured, SQL database engine. SQLite is the most used database engine in the world. Two of the major goals of Flipt are to be 1) Fast and 2) Self contained. SQLite allows us to accomplish both. By embedding the datastore 'within' the application, we eliminate the need to communicate to an external database. This results in faster performance with is required if putting calls to Flipt in the 'hotpath' of your applications. Using SQLite means that you do not need to run an additional client/server RDBMS such as Postgres or MySQL in order for Flipt to store and retrieve your data. This means it's easy to get up and running with Flipt without having to install any additional software. And since a SQLite database is just a file, you can easily backup your data using traditional file backup methods.","title":"SQLite"},{"location":"architecture/#vuejs","text":"Vue.js is a minimal, modern and performant JavaScript framework that makes it easy to implement reactive frontend applications such as the Flipt UI. Vue.js was chosen because of it's rich ecosystem as well as ease of use to get started. The Flipt UI is a Single Page Application (SPA) written in JavaScript using Vue.js, that communicates with with the Flipt backend over the Flipt REST API. This means that the UI uses the same API that end clients do, meaning that anything you can do with the Flipt API, you can do in the UI and vice versa.","title":"Vue.js"},{"location":"architecture/#bulma","text":"Bulma is a free, open source CSS framework based on Flexbox. It makes it easy to make nice looking user interfaces with minimal CSS.","title":"Bulma"},{"location":"architecture/#buefy","text":"Buefy creates lightweight UI components for Vue.js based on Bulma. The Flipt UI was built using several Buefy components that greatly enhanced the speed of development.","title":"Buefy"},{"location":"concepts/","text":"Concepts This document describes the basic concepts of Flipt. More information on how to actually use Flipt is noted in the Getting Started documentation. Flags Flags are the basic unit in the Flipt ecosystem. Flags represent experiments or concepts that you want to be able to enable or disable for users of your applications. For example, a flag named new-contact-page , could be used to determine whether or not a given user sees the latest version of a contact us page that you are working on when they visit your homepage. Flags can be used as simple on/off toggles or with variants and rules to support more elaborate usecases. Variants Variants are options for flags. For example, if you have a flag colorscheme that determines which main colors your users see when they log in to your application, then possible variants could be: Segments Segments allow you to split your userbase or audience up into predefined slices. This is a powerful feature that enables targeting groups to determine if a flag or variant applies to them. An example segment could be new-users . Tip Segments are global across the Flipt application, so they can be used with multiple flags. Constraints Constraints allow you to determine which segment a given user or entity falls into. For example, for a user to fall into the above new-users segment, you may want to check their finished_onboarding property. Note In order for a segment to match, it must match ALL of it's constraints. Rules Rules allow you to tie your flags, variants and segments together by specifying which segments are targeted by which variants. Rules can be as simple as IF IN segment THEN RETURN variant_a or they can be more rich by using distribution logic to rollout features on a percent basis. Continuing our previous example, we may want to return the flag variant blue for all entities in the new-users segment. This would be configured like so: Note: As shown, rules are evaluated in order per their rank from 1-N. The first rule that matches wins. Distributions Distributions allow you to rollout different variants of your flag to percentages of your userbase based on your rules. Let's say that instead of always showing the blue variant to your new-users segment, you want to show blue to 30% of new-users , red to 10%, and green to the remaining 60%. You would accomplish this using rules with distributions: This is an extremely powerful feature of Flipt that can help you seamlessly deploy new features of your applications to your users while also limiting reach of potential bugs.","title":"Concepts"},{"location":"concepts/#concepts","text":"This document describes the basic concepts of Flipt. More information on how to actually use Flipt is noted in the Getting Started documentation.","title":"Concepts"},{"location":"concepts/#flags","text":"Flags are the basic unit in the Flipt ecosystem. Flags represent experiments or concepts that you want to be able to enable or disable for users of your applications. For example, a flag named new-contact-page , could be used to determine whether or not a given user sees the latest version of a contact us page that you are working on when they visit your homepage. Flags can be used as simple on/off toggles or with variants and rules to support more elaborate usecases.","title":"Flags"},{"location":"concepts/#variants","text":"Variants are options for flags. For example, if you have a flag colorscheme that determines which main colors your users see when they log in to your application, then possible variants could be:","title":"Variants"},{"location":"concepts/#segments","text":"Segments allow you to split your userbase or audience up into predefined slices. This is a powerful feature that enables targeting groups to determine if a flag or variant applies to them. An example segment could be new-users . Tip Segments are global across the Flipt application, so they can be used with multiple flags.","title":"Segments"},{"location":"concepts/#constraints","text":"Constraints allow you to determine which segment a given user or entity falls into. For example, for a user to fall into the above new-users segment, you may want to check their finished_onboarding property. Note In order for a segment to match, it must match ALL of it's constraints.","title":"Constraints"},{"location":"concepts/#rules","text":"Rules allow you to tie your flags, variants and segments together by specifying which segments are targeted by which variants. Rules can be as simple as IF IN segment THEN RETURN variant_a or they can be more rich by using distribution logic to rollout features on a percent basis. Continuing our previous example, we may want to return the flag variant blue for all entities in the new-users segment. This would be configured like so: Note: As shown, rules are evaluated in order per their rank from 1-N. The first rule that matches wins.","title":"Rules"},{"location":"concepts/#distributions","text":"Distributions allow you to rollout different variants of your flag to percentages of your userbase based on your rules. Let's say that instead of always showing the blue variant to your new-users segment, you want to show blue to 30% of new-users , red to 10%, and green to the remaining 60%. You would accomplish this using rules with distributions: This is an extremely powerful feature of Flipt that can help you seamlessly deploy new features of your applications to your users while also limiting reach of potential bugs.","title":"Distributions"},{"location":"configuration/","text":"Configuration Configuration File The default way that Flipt is configured is with the use of a configuration file, the default being default.yml . This file is read when Flipt starts up and configures several important properties for the backend and API. You can edit any of these properties to your liking, and on restart Flipt will pick up the new changes. Note These defaults are commented out in default.yml to give you an idea of what they are. To change them you'll first need to uncomment the property. These properties are as follows: Property Description Default host The IP on which to serve the Flipt application 0.0.0.0 log.level Level at which messages are logged (\"trace\", \u201cdebug\u201d, \u201cinfo\u201d, \u201cwarn\u201d, \u201cerror\u201d, \u201cfatal\u201d, \"panic\") \u201cdebug\u201d api.port The port on which to serve the Flipt REST API 8080 backend.port The port on which to serve the Flipt Backend server 9000 db.name The name given to the Flipt database (suffixed with .db) flipt db.path Where to store the Flipt database /var/opt/flipt db.migrations.path Where the Flipt database migration files are kept /etc/flipt/config/migrations db.migrations.auto If database migrations are run on Flipt startup true Using Environment Variables All options in the configuration file can be overridden using environment variables using the syntax: FLIPT_ SectionName _ KeyName Tip Using environment variables to override defaults is especially helpful when using Docker as described in the Installation documentation. Everything should be upper case, . should be replaced by _ . For example, given these configuration settings: backend : port : 9000 database : name : flipt path : /var/opt/flipt You can override them using: export FLIPT_BACKEND_PORT = 9001 export FLIPT_DATABASE_NAME = my-db export FLIPT_DATABASE_PATH = /tmp/db","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#configuration-file","text":"The default way that Flipt is configured is with the use of a configuration file, the default being default.yml . This file is read when Flipt starts up and configures several important properties for the backend and API. You can edit any of these properties to your liking, and on restart Flipt will pick up the new changes. Note These defaults are commented out in default.yml to give you an idea of what they are. To change them you'll first need to uncomment the property. These properties are as follows: Property Description Default host The IP on which to serve the Flipt application 0.0.0.0 log.level Level at which messages are logged (\"trace\", \u201cdebug\u201d, \u201cinfo\u201d, \u201cwarn\u201d, \u201cerror\u201d, \u201cfatal\u201d, \"panic\") \u201cdebug\u201d api.port The port on which to serve the Flipt REST API 8080 backend.port The port on which to serve the Flipt Backend server 9000 db.name The name given to the Flipt database (suffixed with .db) flipt db.path Where to store the Flipt database /var/opt/flipt db.migrations.path Where the Flipt database migration files are kept /etc/flipt/config/migrations db.migrations.auto If database migrations are run on Flipt startup true","title":"Configuration File"},{"location":"configuration/#using-environment-variables","text":"All options in the configuration file can be overridden using environment variables using the syntax: FLIPT_ SectionName _ KeyName Tip Using environment variables to override defaults is especially helpful when using Docker as described in the Installation documentation. Everything should be upper case, . should be replaced by _ . For example, given these configuration settings: backend : port : 9000 database : name : flipt path : /var/opt/flipt You can override them using: export FLIPT_BACKEND_PORT = 9001 export FLIPT_DATABASE_NAME = my-db export FLIPT_DATABASE_PATH = /tmp/db","title":"Using Environment Variables"},{"location":"development/","text":"Development The following are instructions for setting up your machine for Flipt development. Requirements Before starting, make sure you have the following installed: GCC Compiler Go 1.10+ Protoc Compiler Setup Create the directory to clone into: mkdir -p $GOPATH/src/github.com/markphelps Clone this repo: git clone https://github.com/markphelps/flipt $GOPATH/src/github.com/markphelps Run make dev to download dependencies Run make test to execute the test suite Run make build to compile a binary Run make help to see a full list of possible make commands Vagrant You can also easily get started with a development environment running in a VM using Vagrant and Virtual Box . Once you have Vagrant and Virtual Box installed you can change into either the build/ubuntu or build/centos directories and run vagrant up . This will provision a VM that installs the necessary dev dependencies, runs the Flipt test suite and builds the Flipt binary. You can than vagrant ssh into your VM and play around. Configuration Configuration for running when developing Flipt can be found at ./etc/config/dev.yml . To run Flipt with this configuration, run: ./bin/flipt --config ./etc/config/dev.yml Changes Changing certain types of files such as the protobuf, ui or documentation files require re-building before they will be picked up in new versions of the binary. Updating .proto Files After changing flipt.proto , you'll need to run make proto . This will regenerate the following files: flipt.pb.go flipt.pb.gw.go flipt.validator.pb.go Updating Swagger documentation The Swagger documentation for the API is built using the above generated .proto files. After running make proto it's also a good idea to run make swagger. This will regenerate swagger/flipt.swagger.json which contains the Swagger API definitions for the Flipt API. It will also regenerate the embedded HTML that is compiled in the Flipt binary. Updating UI components The UI is built using yarn and is also statically compiled into the Flipt binary. The ui/README.md in the ui directory has more information on how to build the UI and also how to run it locally during development.","title":"Development"},{"location":"development/#development","text":"The following are instructions for setting up your machine for Flipt development.","title":"Development"},{"location":"development/#requirements","text":"Before starting, make sure you have the following installed: GCC Compiler Go 1.10+ Protoc Compiler","title":"Requirements"},{"location":"development/#setup","text":"Create the directory to clone into: mkdir -p $GOPATH/src/github.com/markphelps Clone this repo: git clone https://github.com/markphelps/flipt $GOPATH/src/github.com/markphelps Run make dev to download dependencies Run make test to execute the test suite Run make build to compile a binary Run make help to see a full list of possible make commands","title":"Setup"},{"location":"development/#vagrant","text":"You can also easily get started with a development environment running in a VM using Vagrant and Virtual Box . Once you have Vagrant and Virtual Box installed you can change into either the build/ubuntu or build/centos directories and run vagrant up . This will provision a VM that installs the necessary dev dependencies, runs the Flipt test suite and builds the Flipt binary. You can than vagrant ssh into your VM and play around.","title":"Vagrant"},{"location":"development/#configuration","text":"Configuration for running when developing Flipt can be found at ./etc/config/dev.yml . To run Flipt with this configuration, run: ./bin/flipt --config ./etc/config/dev.yml","title":"Configuration"},{"location":"development/#changes","text":"Changing certain types of files such as the protobuf, ui or documentation files require re-building before they will be picked up in new versions of the binary.","title":"Changes"},{"location":"development/#updating-proto-files","text":"After changing flipt.proto , you'll need to run make proto . This will regenerate the following files: flipt.pb.go flipt.pb.gw.go flipt.validator.pb.go","title":"Updating .proto Files"},{"location":"development/#updating-swagger-documentation","text":"The Swagger documentation for the API is built using the above generated .proto files. After running make proto it's also a good idea to run make swagger. This will regenerate swagger/flipt.swagger.json which contains the Swagger API definitions for the Flipt API. It will also regenerate the embedded HTML that is compiled in the Flipt binary.","title":"Updating Swagger documentation"},{"location":"development/#updating-ui-components","text":"The UI is built using yarn and is also statically compiled into the Flipt binary. The ui/README.md in the ui directory has more information on how to build the UI and also how to run it locally during development.","title":"Updating UI components"},{"location":"getting_started/","text":"Getting Started","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"installation/","text":"Installation Docker The simplest way to run Flipt is via Docker. This streamlines the installation and configuration by using a reliable runtime. Prerequisites Docker installation is required on the host, see the official installation docs . Note Using a native Docker install instead of Docker Toolbox is recommended in order to use persisted volumes. Run the image docker run -d \\ -p 8080 :8080 \\ -p 9000 :9000 \\ -v $HOME /flipt/data:/var/opt/flipt \\ markphelps/flipt:master This will download and start a Flipt container and publish ports needed to access HTTP and GRPC. All Flipt data will be stored as subdirectories of $HOME/flipt/ . Note $HOME/flipt/data is just used as an example, you can use any directory you would like on the host. The Flipt container uses host mounted volumes to persist data: Host location Container location Purpose $HOME/flipt/data /var/opt/flipt For storing application data This allows data to persist between Docker container restarts. Warning If you don't use mounted volumes to persist your data, your data will be lost when the container exits! After starting the container After starting the container you can visit http://0.0.0.0:8080 to view the application. Installing on Linux Flipt RPM/DEB binary packages coming soon! Installing From Source If you'd like to build and install Flipt from source. You can do so following much of the same instructions from the Development documentation to get setup. Build Once you are ready to build the binary, you should be able to run: BUILD_OPTS = -o /bin/flipt make build This will build the binary for your operating system and output the resulting file to /bin/flipt . You can change this path to whatever you would like. Copy You'll need to copy the files in the etc/config directory somewhere that Flipt can access them. These files include necessary database migrations and configuration data. Configure You may also need to change some configuration properties from their defaults. Warning Before editing the default configuration, first backup the file config/default.yml to config/default.yml.bak or similar so that you can restore the defaults if need be. Edit config/default.yml and make sure the following properties are set and match your expectations: Property Description Default db.name The name given to the Flipt database (suffixed with .db) flipt db.path Where to store the Flipt database /var/opt/flipt db.migrations.path Where the Flipt database migration files are kept /etc/flipt/config/migrations db.migrations.auto If database migrations are run on Flipt startup true All of the configuration properties are described in the Configuration documentation. Run You can now run Flipt and see the available options by issuing: /bin/flipt --help To run the server for the first time, run: /bin/flipt --config [ PATH_TO_YOUR_CONFIG_FILE ]","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#docker","text":"The simplest way to run Flipt is via Docker. This streamlines the installation and configuration by using a reliable runtime.","title":"Docker"},{"location":"installation/#prerequisites","text":"Docker installation is required on the host, see the official installation docs . Note Using a native Docker install instead of Docker Toolbox is recommended in order to use persisted volumes.","title":"Prerequisites"},{"location":"installation/#run-the-image","text":"docker run -d \\ -p 8080 :8080 \\ -p 9000 :9000 \\ -v $HOME /flipt/data:/var/opt/flipt \\ markphelps/flipt:master This will download and start a Flipt container and publish ports needed to access HTTP and GRPC. All Flipt data will be stored as subdirectories of $HOME/flipt/ . Note $HOME/flipt/data is just used as an example, you can use any directory you would like on the host. The Flipt container uses host mounted volumes to persist data: Host location Container location Purpose $HOME/flipt/data /var/opt/flipt For storing application data This allows data to persist between Docker container restarts. Warning If you don't use mounted volumes to persist your data, your data will be lost when the container exits!","title":"Run the image"},{"location":"installation/#after-starting-the-container","text":"After starting the container you can visit http://0.0.0.0:8080 to view the application.","title":"After starting the container"},{"location":"installation/#installing-on-linux","text":"Flipt RPM/DEB binary packages coming soon!","title":"Installing on Linux"},{"location":"installation/#installing-from-source","text":"If you'd like to build and install Flipt from source. You can do so following much of the same instructions from the Development documentation to get setup.","title":"Installing From Source"},{"location":"installation/#build","text":"Once you are ready to build the binary, you should be able to run: BUILD_OPTS = -o /bin/flipt make build This will build the binary for your operating system and output the resulting file to /bin/flipt . You can change this path to whatever you would like.","title":"Build"},{"location":"installation/#copy","text":"You'll need to copy the files in the etc/config directory somewhere that Flipt can access them. These files include necessary database migrations and configuration data.","title":"Copy"},{"location":"installation/#configure","text":"You may also need to change some configuration properties from their defaults. Warning Before editing the default configuration, first backup the file config/default.yml to config/default.yml.bak or similar so that you can restore the defaults if need be. Edit config/default.yml and make sure the following properties are set and match your expectations: Property Description Default db.name The name given to the Flipt database (suffixed with .db) flipt db.path Where to store the Flipt database /var/opt/flipt db.migrations.path Where the Flipt database migration files are kept /etc/flipt/config/migrations db.migrations.auto If database migrations are run on Flipt startup true All of the configuration properties are described in the Configuration documentation.","title":"Configure"},{"location":"installation/#run","text":"You can now run Flipt and see the available options by issuing: /bin/flipt --help To run the server for the first time, run: /bin/flipt --config [ PATH_TO_YOUR_CONFIG_FILE ]","title":"Run"}]}